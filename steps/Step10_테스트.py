# -*- coding: utf-8 -*-
"""Step10_테스트.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AGODES3uzdqssQm0ndP7Z7XKXp32dUX1

# Step10 테스트
## 10.1 파이썬 단위 테스트
"""

class Variable:
  def __init__(self, data):
    self.data = data
    self.grad = None
    self.creator = None
  
  def set_creator(self, func):
    self.creator = func

  def backward(self):
    funcs = [self.creator]     
    while funcs :              
      f = funcs.pop()          
      x, y = f.input, f.output 
      x.grad = f.backward(y.grad)

      if x.creator is not None:
        funcs.append(x.creator) 

class Function:
  def __call__(self, input):
    x = input.data
    y = self.forward(x)  
    output = Variable(as_array(y))
    output.set_creator(self) 
    
    self.input = input
    self.output= output 
    return output

  def forward(self, x):
    raise NotImplementedError()

  def backward(self, gy):
    raise NotImplementedError()

class Square(Function):
  def forward(self, x):
    y = x ** 2
    return y

  def backward(self, gy):
    x = self.input.data
    gx = 2 * x * gy
    return gx

class Exp(Function):
  def forward(self, x):
    y = np.exp(x)
    return y

  def backward(self, gy):
    x = self.input.data
    gx = np.exp(x) * gy
    return gx

def square(x):
  return Square()(x)

def exp(x):
  return Exp()(x)

# unittest를 이용한 test.
# unittest를 사용할때는 test할 함수의 이름이 test로 시작해야함
import unittest

class SquareTest(unittest.TestCase):
  def test_forward(self):
    x = Variable(np.array(2.0))
    y = square(x)
    expected = np.array(4.0)
    self.assertEqual(y.data, expected)

unittest.main()

"""## 10.2 square 함수의 역전파 테스트"""

class SquareTest(unittest.TestCase):
  def test_forward(self):
    x = Variable(np.array(2.0))
    y = square(x)
    y.backward()
    expected = np.array(6.0)
    self.assertEqual(x.grad, expected)

unittest.main()

"""## 10.3 기울기 확인을 이용한 자동 테스트"""

# backward를 통해서 구한 기울기와
# 수치 미분으로 구한 결과를 비교하자

def numerical_diff(f, x, eps=1e-4):
  x0 = Variable(x.data - eps)
  x1 = Variable(x.data + eps)
  y0 = f(x0)
  y1 = f(x1)
  return (y1.data - y0.data) / (2*eps)

class SquareTest(unittest.TestCase):
  def test_forward(self):
    x = Variable(np.random.rand(1)) # 무작위 입력값 생성
    y = square(x)
    y.backward()
    num_grad = numerical_diff(square, x)
    flg = np.allclose(x.grad, num_grad) # np.allclose(a, b) : ndarray 인스턴스인 a,b의 값이 가까운지
    self.assertTrue(flg)

unittest.main()

